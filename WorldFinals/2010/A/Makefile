# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /usr/local/lib/gtest-1.5.0

# Where to find user code.
USER_DIR = .

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

PROBLEM_SIMBLE = a

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = $(TESTS_EXE)

MAIN = $(MAIN_EXE)

REPORT = $(REPORT_CPP)



COMMON_HEADER = $(USER_DIR)/$(PROBLEM_SIMBLE).h
METHOD_CPP = $(USER_DIR)/$(PROBLEM_SIMBLE).cpp
MAIN_CPP = $(USER_DIR)/$(PROBLEM_SIMBLE)_main.cpp
REPORT_CPP = $(USER_DIR)/$(PROBLEM_SIMBLE)_report.cpp
UNITTEST_CPP = $(USER_DIR)/$(PROBLEM_SIMBLE)_unittest.cpp

TESTS_EXE = $(USER_DIR)/tests.exe
MAIN_EXE = $(USER_DIR)/main.exe
REPORT_EXE = $(USER_DIR)/report.exe

# House-keeping build targets.

all : $(TESTS) $(MAIN) $(REPORT_CPP) $(REPORT_EXE)

clean :
	rm -f gtest.a gtest_main.a *.o *.exe $(REPORT_CPP)

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(PROBLEM_SIMBLE).o : $(METHOD_CPP) $(COMMON_HEADER) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(METHOD_CPP)

$(PROBLEM_SIMBLE)_unittest.o : $(UNITTEST_CPP) \
                     $(COMMON_HEADER) $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(UNITTEST_CPP)

$(TESTS_EXE) : $(PROBLEM_SIMBLE).o $(PROBLEM_SIMBLE)_unittest.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $(TESTS_EXE)

$(REPORT_CPP): $(COMMON_HEADER) $(METHOD_CPP) $(MAIN_CPP)
	cat $(COMMON_HEADER) > $(REPORT_CPP)
	tail -n +2 $(METHOD_CPP) >> $(REPORT_CPP)
	tail -n +2 $(MAIN_CPP) >> $(REPORT_CPP)

$(MAIN_EXE): $(MAIN_CPP) $(METHOD_CPP)
	g++ $(MAIN_CPP) $(METHOD_CPP) -o $(MAIN_EXE)

$(REPORT_EXE): $(REPORT_CPP)
	g++ $(REPORT_CPP) -o $(REPORT_EXE)
